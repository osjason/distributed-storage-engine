syntax = "proto3";
package meta;
import public "google/protobuf/timestamp.proto";
import public "google/protobuf/empty.proto";


/*
    如果Client 上传中断 ，只发 Block 附带的 FileHash，让 NameNode 删除该 File 的所有已经记录的元数据
 */

// 每个分成了多个数据块
message Block{
    string ServerId = 1;
    string BlockId = 2;
    string FileHash = 3;
    string AfterBlockId = 4;
    int64 StarSubscript = 5;
    int64 EndSubscript = 6;
    // 一个块，多个服务器备份，这里存服务器 ID 就行

    // 只有主副本，BackupBlockId 数组才有其它的 BlockId，
    // 备副本，BackupBlockId 数组为空
    repeated string BackupBlockId = 7;
    google.protobuf.Timestamp Time = 8;
}

// 1: a,b,c; 2:a,b,c

//--------------------

//  DataNode 作为服务端，NameNode 作为远程函数调用端
//      背景：Client 的任何【主动操作】（上传/删/下载/修改）经过 NameNode 申请后，Client 直接向 DataNode 操作
//      todo 明确使用场景
service BlockResultReport{
    // 返回某一个文件的 Block 元信息 和所属文件的整体 hash 值
    rpc GetBlockStatus(google.protobuf.Empty) returns (stream Block);
}

/*
  file1:block 2, file1: block 1, file2 : block 1, file1 : block 3（此时 file1 取消上传）
  发送
 */